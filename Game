import java.awt.*;
import java.awt.image.BufferStrategy;
import java.util.Random;

public class Game extends Canvas implements Runnable {

    private static final long serialVersionUID=1550691097823471818L;

    private Random r;

    public static final int WIDTH=720,HEIGHT=WIDTH/12*9;

    private Thread thread;
    private boolean running=false;
    private Handler handler;
    public MENU se;

    public enum STATE {
        Menu,
        Game
    };

    public STATE gs = STATE.Menu;

    BufferStrategy bs = this.getBufferStrategy();

    public Game(){
        handler = new Handler();
        se = new MENU(this,handler);
        this.addKeyListener(new KeyInput(handler));
        this.addMouseListener(se);

        new window(WIDTH,HEIGHT,"Jump",this);

        if (gs==STATE.Game) {
            handler.addobject(new Player(WIDTH / 2 - 32, HEIGHT - 16, ID.Player));
            handler.addobject(new Enemy(WIDTH / 2, HEIGHT / 2, ID.Enemy, handler));
        }
    }



    public synchronized void start(){
        thread=new Thread(this);
        thread.start();
        running=true;
    }

    public synchronized void stop(){
        try{
            thread.join();
            running=false;
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    public void run(){
        long lastTime = System.nanoTime();
        double aot=60.0;
        double ns = 1000000000/aot;
        double delta=0;
        long timer=System.currentTimeMillis();
        int frames=0;
        while (running){
            long now = System.nanoTime();
            delta+=(now-lastTime)/ns;
            lastTime=now;
            while (delta>=1){
                tick();
                delta--;
            }
            if (running){
                render();

            }
            frames++;

            if(System.currentTimeMillis()-timer>1000){
                timer+=1000;
                //System.out.println("FPS"+frames);
                frames=0;
            }

        }
        stop();
    }


    private void tick(){
        handler.tick();
        if (gs==STATE.Game){

        }else if(gs==STATE.Menu){
            se.tick();
        }
    }
    private void render(){
        BufferStrategy bs = this.getBufferStrategy();
        if (bs==null){
            this.createBufferStrategy(3);
            return;
        }

        Graphics g = bs.getDrawGraphics();

        g.setColor(Color.GRAY);
        g.fillRect(0,0,WIDTH,HEIGHT);

        handler.render(g);
        if (gs==STATE.Game){

        }
           else if (gs==STATE.Menu){
            se.render(g);
        }


        g.dispose();
        bs.show();
    }

    public static void main(String args[]){
        new Game();
    }
}
